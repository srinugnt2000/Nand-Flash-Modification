* Overview

The Multifunction Composite Gadget (or g_multi) is a customisable
composite gadget that makes extensive use of the composite framework
to provide a... multifunction gadget.

In it's standard configuration it provides a single USB configuration
with RNDIS[1] (that is Ethernet), USB CDC[2] ACM (that is serial) and
USB Mass Storage functions.

Each function can be disabled via a Kconfig option.  There's also
a CDC ECM (Ethernet) function which can be turned on.  If, however,
CDC ECM and RNDIS are enabled the gadget will have two configurations
-- one with RNDIS and another with CDC ECM[3].

Please not, however, that if you use non-standard configuration you
may need to change vendor and/or product ID.

* Host drivers

To make use of the gadget one needs to make it work on host side --
without that there's no hope of achieving anything with the gadget.
As one might expect, things one need to do very from system to system.

** Linux host drivers

Since the gadget uses standard composite framework and appears as such
to Linux host it does not need any additional drivers on Linux host
side.  All the functions are handled by respective drivers designed
for them.

This is also true for two configuration set-up with RNDIS
configuration being the first one.  Linux host will use the second
configuration with CDC ECM which should work better under Linux.

** Windows host drivers

For the gadget two work under Windown two conditions have to be met:

*** Detecting as composite gadget

First of all, Windows need to detect the gadget as an USB composite
gadget which on its own have some conditions[4].  If they are met,
Windows lets USB Generic Parent Driver[5] handle the device which then
tries to much drivers for each individual interface (sort of, don't
get into too many details).

The good news is, you do not have to worry about most of conditions!

The only thing to worry is that the gadget has to have a single
configuration so a dual RNDIS and CDC ECM gadget won't work unless you
create a proper INF -- and of course, if you do submit it!

*** Attaching drivers for each function

The other, trickier thing is making Windows attach drivers to each
individual function.

For mass storage it is trivial since Windows detect it's an interface
implementing USB Mass Storage class and selects appropriate driver.

Things are harder with RDNIS and CDC ACM.

**** RNDIS

To make Windows select RNDIS drivers for the first function in the
gadget, one needs to use the [[file:gadget_multi_rndis.inf]] file
provided with this document.  It "attaches" Window's RNDIS driver to
the first interface of the gadget.

Please note, that while testing we encountered some issues[6] when
RNDIS was not the first interface.  You do not need to worry abut it
unless you are trying to develop your own gadget in which case watch
out for this bug.

**** CDC ACM

Similarly, [[file:gadget_multi_serial.inf]] is provided for CDC ACM.
Note, however that it also requires an usbser.sys file which can be
extracted form Windows XP SP3 cab files.

There is another usbser.sys file floating around the Internet but as
we were testing the gadget it failed to work.  It is very likely that
one needs usbser.sys in version intended for one's version of Windows.

We do net claim to be experts as far as INF files are considered so we
think that there should be a better way of defining files in the
[[file:gadget_multi_serial.inf]] so that it will work regardless of SP
version installed.  Again, if you happen to hack a better INF do not
hesitate submitting it!

**** Customising the gadget

If you intend to hack the g_multi gadget be advised that rearranging
functions will obviously change interface numbers for each of the
functionality.  As an effect provided INFs won't work since they have
interface numbers hard-coded in them (it's not hard to change those
though).

This also means, that after experimenting with g_multi and changing
provided functions one should change gadget's vendor and/or product ID
so there will be no collision with other customised gadgets or the
original gadget.

Failing to comply may cause brain damage after wondering for hours why
things don't work as intended before realising Windows have cached
some drivers information (changing USB port may sometimes help).

**** Improvements in INF files

It needs to be noted that we are not Windows driver experts and as
such we do not claim that provided INF files are flawless or that they
will work on each and every Windows versions (they were tested on
Windows XP SP3 only).

The bottom line is, if you can improve the INF files, please do and
share the results[7]. :)

** Other systems

At this moment, drivers for any other systems have not been tested.
Knowing how MacOS is based on BSD and BSD is an Open Source it is
believed that it should (read: "I have no idea whether it will") work
out-of-the-box.

For more exotic systems I have even less to say...

Any testing and drivers *are* *welcome*!

* Authors

This document has been written by Michal Nazarewicz
([[mailto:min...@mina86.com]]) and the INF files have been hacked by
Marek Szyprowski ([[mailto:m.szyp...@samsung.com]]) basing on the
[[file:linux.inf]] file provided for Ethernet gadget and description
from [[file:gadget_serial.txt]].

* Footnotes

[1] Remote Network Driver Interface Specification,
[[http://msdn.microsoft.com/en-us/library/ee484414.aspx]].

[2] Communications Device Class Abstract Control Model, spec for this
and other USB classes can be found at
[[http://www.usb.org/developers/devclass_docs/]].

[3] CDC Ethernet Control Model.

[4] [[http://msdn.microsoft.com/en-us/library/ff537109(v=VS.85).aspx]].

[5] [[http://msdn.microsoft.com/en-us/library/ff539234(v=VS.85).aspx]].

[6] To put it in some other nice words, Windows failed to respond to
any user input.

[7] Possibility to say `git rev-list --author='Your Name'
linus/master|wc -l` returns non-zero -- priceless. :]

